// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MeetMikey.View.Base = (function(_super) {

    __extends(Base, _super);

    function Base() {
      this.assign = __bind(this.assign, this);

      this.renderSubview = __bind(this.renderSubview, this);

      this.renderSubviews = __bind(this.renderSubviews, this);

      this.render = __bind(this.render, this);

      this._teadown = __bind(this._teadown, this);

      this.subView = __bind(this.subView, this);

      this.initialize = __bind(this.initialize, this);
      return Base.__super__.constructor.apply(this, arguments);
    }

    Base.prototype.initialize = function() {
      var name, obj, _ref;
      _ref = this.subViews;
      for (name in _ref) {
        obj = _ref[name];
        obj.view = new obj.view(obj.args);
      }
      this.postInitialize();
      return this;
    };

    Base.prototype.postInitialize = function() {};

    Base.prototype.subView = function(name) {
      return this.subViews[name].view;
    };

    Base.prototype._teadown = function() {
      _.chain(this.subViews).values().pluck('view').invoke('_teardown');
      this.teardown();
      this.off();
      this.remove();
      this.undelegateEvents();
      return this;
    };

    Base.prototype.teardown = function() {};

    Base.prototype.render = function() {
      this.$el.html(this.template(this.getTemplateData()));
      this.renderSubviews();
      this.postRender();
      return this;
    };

    Base.prototype.postRender = function() {};

    Base.prototype.getTemplateData = function() {
      return {};
    };

    Base.prototype.renderSubviews = function() {
      var name;
      for (name in this.subViews) {
        this.renderSubview(name);
      }
      return this;
    };

    Base.prototype.renderSubview = function(name) {
      var view;
      view = this.subViews[name];
      this.assign(view.selector, view.view);
      return this;
    };

    Base.prototype.assign = function(selector, view) {
      return view.setElement(selector).render();
    };

    return Base;

  })(Backbone.View);

}).call(this);
